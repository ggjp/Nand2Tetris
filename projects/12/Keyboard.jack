// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {

    /** Initializes the keyboard. */
    function void init() {
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        var Array keyboard;
        let keyboard = 0;
        return keyboard[24576];
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var char c;

        // The built-in implementation of Keyboard displays a cursor on the screen.
        // This line allows to print that cursor on the screen by printing any non printing character (black box).
        // This character is removed at the end with Output.backSpace and the character pressed is returned instead.
        do Output.printChar(0);

        while (Keyboard.keyPressed() = 0) {}
        let c = Keyboard.keyPressed();
        while (~(Keyboard.keyPressed() = 0)) {}

        // Remove the non printing character and replace it with c.
        do Output.backSpace();

        // Using printChar(c) even if c is a backspace seems to be working fine with the built-in Output.vm.
        // With Keyboard.jack only and the built-in Output.vm, if we hit backSpace, we get a backSpace as expected.
        // So, printChar() below seems to handle backSpaces.
        //
        // Similarly for c = newLine. With Keyboard.jack only and the built-in Output.vm, we get a newLine at
        // the end of a readLine(). It means that printChar() below handles newLine characters.
        do Output.printChar(c);
        return c;
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var String s;
        var char c;

        let s = String.new(30);   // TODO: Allow more than 30 characters
        do Output.printString(message);

        while (true) {
            let c = Keyboard.readChar();

            if (c = String.newLine()) {
                return s;
            }
            else {
                if ((c = String.backSpace()) & (s.length() > 0)) {
                    do s.eraseLastChar();
                }
                else {
                    if (s.length() < 30) {
                        do s.appendChar(c);
                    }
                }
            }
        }
        return s;   // Never reached
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        var String s;

        let s = Keyboard.readLine(message);
        return s.intValue();
    }
}
