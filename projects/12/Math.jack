// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = ~32767;  // = 38768, but this integer constant is too big
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;

        let sum = 0;
        let shiftedX = x;
        let i = 0;

        while (i < 16) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int result;

        let result = Math._dividePositives(Math.abs(x), Math.abs(y));

        if (((x < 0) & (y > 0)) | ((x > 0) & (y < 0))) {
            return -result;
        }
        else {
            return result;
        }
    }

    // This function implements the algorithm in figure 12.2.
    // This separate function allows to handle the case of y overflowing, as stated on page 268.
    function int _dividePositives(int x, int y) {
        var int q;

        if ((y > x) | (y < 0)) { // y could overflow and become negative, as stated on page 268.
            return 0;
        }

        let q = Math._dividePositives(x, y + y);
        if ((x - ((q + q) * y)) < y) {
            return q + q;
        }
        else {
            return (q + q) + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, yPlus2j, yPlus2jSquared;

        let y = 0;
        let j = 7;
        while (j < -1) {
            let yPlus2j = y + twoToThe[j];
            let yPlus2jSquared = yPlus2j * yPlus2j;
            if ((yPlus2jSquared < (x+1)) & (yPlus2jSquared > 0)) { // yPlus2jSquared can overflow and become negative (page 268).
                let y = yPlus2j;
            }
        }
        return y;
    }

    function boolean bit(int x, int j) {
        return ~((x & twoToThe[j]) = 0);
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        else {
            return b;
        }
    }
}
