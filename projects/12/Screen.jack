// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static boolean currentColor;

    /** Initializes the Screen. */
    function void init() {
        let currentColor = true;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;

        let i = 0;
        while (i < 8192) {
            do Memory.poke(16384 + i, false);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let currentColor = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, bit, mask, i;

        let address = 16384 + (y * 32) + (x / 16);
        let bit = x - ((x / 16) * 16);   // x % 16

        // Calculate mask
        let mask = 1;
        let i = 0;
        while (i < bit) {
            let mask = mask + mask;  // mask * 2
            let i = i + 1;
        }

        if (currentColor) {
            do Memory.poke(address, Memory.peek(address) | mask);
        }
        else {
            do Memory.poke(address, Memory.peek(address) & ~mask);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b, dx, dy, adyMinusbdx;

        let a = 0;
        let b = 0;
        let dx = x2 - x1;
        let dy = y2 - y1;
        let adyMinusbdx = 0;

        // Algorithm of figure 12.8
        if ((dx > 0) & (dy > 0)) {
            while ((a < (dx+1)) & (b < (dy+1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                }
                else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }
        if ((dx < 0) & (dy > 0)) {
            while ((a > (dx-1)) & (b < (dy+1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a - 1;
                    let adyMinusbdx = adyMinusbdx + dy;
                }
                else {
                    let b = b + 1;
                    let adyMinusbdx = adyMinusbdx - (-dx);
                }
            }
        }
        if ((dx > 0) & (dy < 0)) {
            while ((a < (dx+1)) & (b > (dy-1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a + 1;
                    let adyMinusbdx = adyMinusbdx + (-dy);
                }
                else {
                    let b = b - 1;
                    let adyMinusbdx = adyMinusbdx - dx;
                }
            }
        }
        if ((dx < 0) & (dy < 0)) {
            while ((a > (dx-1)) & (b > (dy-1))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (adyMinusbdx < 0) {
                    let a = a - 1;
                    let adyMinusbdx = adyMinusbdx + (-dy);
                }
                else {
                    let b = b - 1;
                    let adyMinusbdx = adyMinusbdx - (-dx);
                }
            }
        }
        // Other algorithm for cases of dx = 0 and dy = 0
        if (dx = 0) {
            let a = Math.min(y1, y2);
            let b = Math.max(y1, y2);

            while (a < (b+1)) {
                do Screen.drawPixel(x1, a);
                let a = a + 1;
            }
        }
        if (dy = 0) {
            let a = Math.min(x1, x2);
            let b = Math.max(x1, x2);

            while (a < (b+1)) {
                do Screen.drawPixel(a, y1);
                let a = a + 1;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy, i;

        let dx = x2 - x1;
        let dy = y2 - y1;

        let i = 0;
        while (i < (dy+1)) {
            do Screen.drawLine(x1, y1 + i, x2, y1 + i);
            let i = i + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy, r2, sqrtr2Minusdy2;

        let dy = -r;
        let r2 = r * r;
        while (dy < (r+1)) {
            let sqrtr2Minusdy2 = Math.sqrt(r2 - (dy * dy));
            do Screen.drawLine(x - sqrtr2Minusdy2, y + dy, x + sqrtr2Minusdy2, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
